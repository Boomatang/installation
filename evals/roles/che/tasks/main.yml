---
# tasks file for che

-
  name: Create openshift project
  shell: oc new-project {{ che_namespace }}
  register: project_cmd
  failed_when: project_cmd.rc != 0 and project_cmd.rc != 1

- name: Add labels to namespace
  shell: oc patch ns {{ che_namespace }} --patch '{"metadata":{"labels":{"{{ monitoring_label_name }}":"{{ monitoring_label_value }}", "integreatly-middleware-service":"true"}}}'
  register: namespace_patch
  failed_when: namespace_patch.stderr != '' and 'not patched' not in namespace_patch.stderr
  changed_when: namespace_patch.rc == 0

-
  name: Remove LimitRange if any is defined
  shell: oc delete LimitRange/che-core-resource-limits -n {{ che_namespace }}
  register: limitrange_cmd
  failed_when: limitrange_cmd.rc != 0 and limitrange_cmd.rc != 1

-
  name: Create infra namespace
  shell: "oc new-project {{ che_infra_namespace }}"
  register: project_infra_cmd
  failed_when: project_infra_cmd.rc != 0 and project_infra_cmd.rc != 1
  when: che_infra_namespace is defined and che_infra_namespace != ""

- name: Add labels to namespace
  shell: "oc patch ns {{ che_infra_namespace }} --patch '{\"metadata\":{\"labels\":{\"{{ monitoring_label_name }}\":\"{{ monitoring_label_value }}\", \"integreatly-middleware-service\":\"true\"}}}'"
  register: namespace_patch
  failed_when: namespace_patch.stderr != '' and 'not patched' not in namespace_patch.stderr
  changed_when: namespace_patch.rc == 0
  when: che_infra_namespace is defined and che_infra_namespace != ""

-
  name: Create template folder structure
  file:
    path: "{{ che_template_folder }}/deploy/{{ item.path }}"
    state: directory
  with_filetree: "{{ role_path }}/templates/deploy"
  when: item.state == 'directory'

-
  name: Copy template files to temporary folder
  template:
    src: "{{ item.src }}"
    dest: "{{ che_template_folder }}/deploy/{{ item.path }}"
  with_filetree: "{{ role_path }}/templates/deploy"
  when: item.state == 'file'

-
  name: Include postgres tasks
  include_tasks: deploy-postgres.yml
  when: che_multiuser|bool == true

-
  name: Check if che is already deployed
  shell: "oc get dc -l app={{ che_app_label }} -o jsonpath='{.items[0].metadata.name}' -n {{ che_namespace }}"
  register: che_dc_cmd
  failed_when: false

-
  name: Include che server tasks
  include_tasks: deploy-che-server.yml
  when: che_dc_cmd.rc != 0

-
  name: Include che route tasks
  include_tasks: deploy-che-route.yml
  when: che_protocol == 'https'

-
  name: Include keycloak tasks
  include_tasks: keycloak-client.yml
  when: che_multiuser|bool == true

-
  name: Include persistent volume tasks
  include_tasks: deploy-che-workspace-persistent-volume.yml
  when: che_persistent_volume|bool == true
